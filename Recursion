509. Fibonacci Number  Q link :- https://leetcode.com/problems/fibonacci-number/

The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

Example 1:

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.
Example 2:

Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.
Example 3:

Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.
 

Constraints:

0 <= n <= 30


#My Ans

class Solution {
    public int fib(int n) {
        if(n == 0 || n==1){
            return n;
        }else{
            return fib(n-1) + fib(n-2);
        }
        
        }
}


231. Power of Two   Q Link :- https://leetcode.com/problems/power-of-two/


Given an integer n, return true if it is a power of two. Otherwise, return false.

An integer n is a power of two, if there exists an integer x such that n == 2x.

 

Example 1:

Input: n = 1
Output: true
Explanation: 20 = 1
Example 2:

Input: n = 16
Output: true
Explanation: 24 = 16
Example 3:

Input: n = 3
Output: false
 

Constraints:

-231 <= n <= 231 - 1

# My Ans

import java.lang.*;

class Solution {
    public boolean isPowerOfTwo(int n) {
        // if(n % 2 != 0){
        //     return false;
        // }
        boolean flag = false;
        double x = Math.sqrt(n);
        if(x == (int)x ){
            flag = true;
        }
        return flag;
        
        
    }
}


