231. Power of Two   Q Link :- https://leetcode.com/problems/power-of-two/
Given an integer n, return true if it is a power of two. Otherwise, return false.

An integer n is a power of two, if there exists an integer x such that n == 2x.

 

Example 1:

Input: n = 1
Output: true
Explanation: 20 = 1
Example 2:

Input: n = 16
Output: true
Explanation: 24 = 16
Example 3:

Input: n = 3
Output: false
 

Constraints:

-231 <= n <= 231 - 1

Ans:- import java.lang.*;

class Solution {
    public boolean isPowerOfTwo(int n) {
        if(n == 1){
            return true;
        }
        if(n == 0 || n % 2 != 0){
            return false;
        }
        
        
        return isPowerOfTwo(n / 2);
        
    }
}


326. Power of Three  Q Link:- https://leetcode.com/problems/power-of-three/

Given an integer n, return true if it is a power of three. Otherwise, return false.

An integer n is a power of three, if there exists an integer x such that n == 3x.

 

Example 1:

Input: n = 27
Output: true
Example 2:

Input: n = 0
Output: false
Example 3:

Input: n = 9
Output: true
 

Constraints:

-231 <= n <= 231 - 1


Ans:- 


class Solution {
    public boolean isPowerOfThree(int n) {
        if(n == 1){
            return true;
        }
        if(n == 0  || n % 3 != 0){
            return false;
        }
        return isPowerOfThree(n / 3);
    }
}



342. Power of Four  Q Link:- https://leetcode.com/problems/power-of-four/


Given an integer n, return true if it is a power of four. Otherwise, return false.

An integer n is a power of four, if there exists an integer x such that n == 4x.

 

Example 1:

Input: n = 16
Output: true
Example 2:

Input: n = 5
Output: false
Example 3:

Input: n = 1
Output: true
 

Constraints:

-231 <= n <= 231 - 1

Ans:-

class Solution {
    public boolean isPowerOfFour(int n) {
        if(n == 1){
            return true;
        }
        if(n == 0 || n % 4 != 0){
            return false;
        }
        return isPowerOfFour( n / 4);
        
    }
}
